//R√©cup du logger
const logger = require('../../modules/logger');
//R√©cup du cr√©ateur d'embed
const emb = require('../../modules/embeds');
//Fonction pour attendre
const wait = require('node:timers/promises').setTimeout;

module.exports = {
    execute: async function(interaction, errEmb) {
        const title = `Bug Report`;
        const serverIcon = `https://cdn.discordapp.com/icons/${interaction.guild.id}/${interaction.guild.icon}.webp`;
        const thumb = process.env.DEV_LOGO;
        //Affichage du message "Iris r√©fl√©chis..."
        await interaction.deferReply({ ephemeral: true });
        let name = interaction.guild.members.cache.get(process.env.IRIS_DISCORD_ID).nickname;
        if(name == null) {
            name = interaction.client.user.username;
        }
        const userid = interaction.message.embeds[0].author.name.split('@')[1].split('>')[0];
        let userGuild = null;
        interaction.client.guilds.cache.map(guild => {
            if(guild.members.cache.get(userid) != null) {
                userGuild = guild.id;
            }
        });
        if(userGuild != null) {
            const user = interaction.client.guilds.cache.get(userGuild).members.cache.get(userid);
            try {
                //Retour √† l'utilisateur de sa demande de debug
                await user.send({ embeds: [emb.generate('Suite √† votre demande de debug', null, `La demande de debug de la foncitonnalit√© **${interaction.message.embeds[0].title.split(': ')[1]}** a bien √©t√© revue mais n'a pas √©t√© jug√©e comme √©tant un bug ou le bug n'a pas pu √™tre reproduit\n\nMerci tout m√™me de votre report, c'est gr√¢ce aux personnes comme vous que l'on peut am√©liorer l'exp√©rience utilisateur üíô`, '#FF0000', `https://cdn.discordapp.com/attachments/1083724872045297734/1084447275121647626/no.webp`, null, null, null, null, `Cordialement, ` + interaction.user.username, interaction.user.avatarURL(), true)] });
                await interaction.followUp({ embeds: [emb.generate('Demande annul√©e', null, `**${interaction.message.embeds[0].author.name}** √† bien √©t√© pr√©venu du retour concernant sa demande !`, '#0DE600', thumb, null, title, serverIcon, null, null, null, true)], ephemeral: true });
                await interaction.message.delete();
                // Supprime la r√©ponse apr√®s 5s
                await wait(5000);
                await interaction.deleteReply();
            } catch (err) {
                //Si l'utilisateur √† ses MP de ferm√©s
                if(err.code == 50007) {
                    try {
                        await interaction.followUp({ embeds: [emb.generate('‚ö†Ô∏è Attention', null, `L'utilisateur **${interaction.message.embeds[0].author.name}** n'a pas √©t√© pr√©venu du retour car il a ses MP de ferm√©s`, 'Gold', thumb, null, title, serverIcon, null, null, null, true)], ephemeral: true });
                        await interaction.message.delete();
                        // Supprime la r√©ponse apr√®s 5s
                        await wait(5000);
                        await interaction.deleteReply();
                    } catch (err) {
                        logger.error(err);
                        await interaction.followUp({ embeds: [errEmb], ephemeral: true });
                    }
                //Lors d'une vraie erreur
                } else {
                    await interaction.followUp({ embeds: [errEmb], ephemeral: true });
                    logger.error(err);
                }
            }
        } else {
            try {
                await interaction.followUp({ embeds: [emb.generate('‚ö†Ô∏è Attention', null, `L'utilisateur **${interaction.message.embeds[0].author.name}** n'a pas √©t√© pr√©venu du retour car il n'a pas √©t√© trouv√© sur un serveur en commun !`, '#FF0000', thumb, null, title, serverIcon, null, null, null, true)], ephemeral: true });
                await interaction.message.delete();
                // Supprime la r√©ponse apr√®s 5s
                await wait(5000);
                await interaction.deleteReply();
            } catch (err) {
                logger.error(err);
                await interaction.followUp({ embeds: [errEmb], ephemeral: true });
            }
        }
    }
}