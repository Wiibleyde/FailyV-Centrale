//R√©cup√©ration des fonctions pour cr√©er une commande
const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
//R√©cup du logger
const logger = require('../../modules/logger');
//R√©cup du cr√©ateur d'embed
const emb = require('../../modules/embeds');
//R√©cup des requ√™tes SQL
const sql = require('../../sql/agenda/agenda');
//R√©cup du formateur de noms
const format = require('../../modules/formatName');

const wait = require('node:timers/promises').setTimeout;

module.exports = {
    //Cr√©ation de la commande
    data: new SlashCommandBuilder()
        .setName(`agenda`)
        .setDescription(`Ajouter un d√©c√®s √† l'agenda`)
        .addStringOption(option =>
            option.setName(`identit√©`)
            .setDescription(`Pr√©nom et nom de la personne`)
            .setRequired(true))
        .addStringOption(option =>
            option.setName(`responsables`)
            .setDescription(`Liste des personnes r√©ponsables`)
            .setRequired(true))
        .addStringOption(option =>
            option.setName(`autoris√©s`)
            .setDescription(`Liste des personnes autoris√©es`)
            .setRequired(true))
        .addStringOption(option =>
            option.setName(`confidentialit√©`)
            .setDescription(`Est ce que le d√©c√®s est publique ou priv√© ?`)
            .addChoices(
                {
                    name: `Publique`,
                    value: `public`
                },
                {
                    name: `Priv√©`,
                    value: `private`
                }
            ).setRequired(true))
        .addStringOption(option =>
            option.setName(`donneur`)
            .setDescription(`Est ce que la personne est donneuse d'organnes ?`)
            .addChoices(
                {
                    name: `Oui`,
                    value: `Oui`
                },
                {
                    name: `Non`,
                    value: `Non`
                }
            ).setRequired(true))
        .addStringOption(option =>
            option.setName(`traitement`)
            .setDescription(`Comment doit √™tre trait√© le corps de la personne ?`)
            .setRequired(true))
        .addStringOption(option =>
            option.setName(`service`)
            .setDescription(`Quel service √† g√©r√© la personne ?`)
            .addChoices(
                {
                    name: `LSMS`,
                    value: `LSMS`
                },
                {
                    name: `BCMS`,
                    value: `BCMS`
                }
            ).setRequired(true))
        .addStringOption(option =>
            option.setName(`autre`)
            .setDescription(`Des infos suppl√©mentaires √† renseigner ?`)
            .setRequired(false))
        .addStringOption(option =>
            option.setName(`date`)
            .setDescription(`Sp√©cifier une date de d√©c√®s autre qu'aujourd'hui`)
            .setRequired(false)),
    async execute(interaction) {
        await interaction.deferReply({ ephemeral: true });
        const guild = interaction.client.guilds.cache.get(process.env.IRIS_PRIVATE_GUILD_ID);
        const serverIconURL = `https://cdn.discordapp.com/icons/${process.env.IRIS_PRIVATE_GUILD_ID}/${guild.icon}.webp`;
        const agendaChannelId = await sql.getAgendaChannelId();
        const mairieD√©c√®sChannelId = await sql.getMairieD√©c√®sChannelId();
        const lspdChannelId = await sql.getLSPDChannelId();

        if(agendaChannelId[0] == null || mairieD√©c√®sChannelId[0] == null || lspdChannelId[0] == null) {
            return interaction.followUp({ embeds: [emb.generate(null, null, `Oups :(\n\nAucun identifiant pour les salons de gestion de l'agenda n'a √©t√© trouv√© en base de donn√©e\nVeuillez contacter un des d√©veloppeurs (<@461880599594926080>, <@461807010086780930> ou <@368259650136571904>) pour r√©gler ce probl√®me !`, "#FF0000", process.env.LSMS_LOGO_V2, null, `Gestion d√©c√®s`, serverIconURL, null, null, null, false)], ephemeral: true });
        }
        const agendaChan = guild.channels.cache.get(agendaChannelId[0].id);
        const mairieD√©c√®sChan = guild.channels.cache.get(mairieD√©c√®sChannelId[0].id);
        const lspdChan = guild.channels.cache.get(lspdChannelId[0].id);

        //S√©paration du pr√©nom et nom pour retour √† la ligne
        let patientName = interaction.options.getString(`identit√©`).split(' ');
        let firstname = format.name(patientName.shift());
        let lastname;
        if(patientName[0] != null) {
            patientName = patientName.join(' ');
            lastname = format.name(patientName);
        } else {
            await interaction.followUp({ embeds: [emb.generate(`Erreur :(`, null, `Attention, il semblerai que vous n'ayez pas sp√©cifi√© de **nom de famille** !\nFaites bien attention √† sp√©cifier le nom complet de la personne dans la commande !`, `#FF0000`, process.env.LSMS_LOGO_V2, null, `Gestion d√©c√®s`, serverIconURL, null, null, null, false)], ephemeral: true });
            await wait(5000);
            return await interaction.deleteReply();
        }

        const isUserExists = await sql.getByName(firstname + ' ' + lastname);

        if(isUserExists[0] != null) {
            await interaction.followUp({ embeds: [emb.generate(`Erreur :(`, null, `Attention, il semblerai que **${firstname} ${lastname}** soit d√©j√† inscrit(e) dans l'agenda !\nSi vous souhaitez r√©√©lement recr√©er cette fiche, veuillez d'abord supprimer la pr√©c√©dente !`, `#FF0000`, process.env.LSMS_LOGO_V2, null, `Gestion d√©c√®s`, serverIconURL, null, null, null, false)], ephemeral: true });
            await wait(5000);
            return await interaction.deleteReply();
        }

        let confi;
        let confiDB;
        if(interaction.options.getString(`confidentialit√©`) == 'public') {
            confi = `D√©c√®s publique`;
            confiDB = 1;
        } else {
            confi = `D√©c√®s priv√©`;
            confiDB = 0;
        }

        let donDB;
        if(interaction.options.getString(`donneur`) == 'Oui') {
            donDB = 1;
        } else {
            donDB = 0;
        }

        let date;
        if(interaction.options.getString(`date`) != null) {
            const regexDate = /^(0[1-9]|1\d|2[0-8]|29(?=\/\d\d\/(?!1[01345789]00|2[1235679]00)\d\d(?:[02468][048]|[13579][26]))|30(?!\/02)|31(?=\/0[13578]|\/1[02]))\/(0[1-9]|1[0-2])\/([12]\d{3})$/gm;
            if(!regexDate.test(interaction.options.getString(`date`))) {
                await interaction.reply({ embeds: [emb.generate(`Erreur :(`, null, `La date que vous avez sp√©cifi√©e n'est pas une date valide !\n\nVous devez ins√©rer une date au format **JJ/MM/AAAA**`, `#FF0000`, process.env.LSMS_LOGO_V2, null, `Gestion d√©c√®s`, serverIconURL, null, null, null, false)], ephemeral: true });
                await wait(5000);
                return await interaction.deleteReply();
            } else {
                date = interaction.options.getString(`date`);
            }
        } else {
            //Get now date
            const now = new Date();
            let day = now.getDate()
            if (day < 10) day = '0' + day;
            let month = now.getMonth() + 1;
            if (month < 10) month = '0' + month;
            const year = now.getFullYear();
            date = day + '/' + month + '/' + year;
        }

        let service;
        if(interaction.options.getString(`service`) == 'LSMS') {
            service = '<:IrisLSMS:1133116950357213355> LSMS';
        } else {
            service = '<:IrisBCMS:1133150717125853297> BCMS';
        }

        const buttons = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setLabel(`D√©finir la date`).setCustomId(`agEventDefine`).setStyle(ButtonStyle.Success).setEmoji(`üìÜ`).setDisabled(false),
            new ButtonBuilder().setLabel(`Responsables contact√©s`).setCustomId(`agRespContact`).setStyle(ButtonStyle.Primary).setEmoji(`üì±`).setDisabled(false),
            new ButtonBuilder().setLabel(`Supprimer`).setCustomId(`agDelete`).setStyle(ButtonStyle.Danger).setEmoji(`896393106633687040`).setDisabled(false)
        );

        const newEmbed = emb.generate(null, null, null, `#000001`, process.env.LSMS_DELTA_LOGO, null, `Gestion d√©c√®s`, serverIconURL, null, interaction.member.nickname, null, false);
        newEmbed.addFields(
            {
                name: `**Identit√©**`,
                value: firstname + ' ' + lastname,
                inline: true
            },
            {
                name: `**Date du d√©c√®s**`,
                value: date,
                inline: true
            },
            {
                name: `**Trait√© par**`,
                value: service,
                inline: true
            },
            {
                name: `**Personnes responsables**`,
                value: interaction.options.getString(`responsables`),
                inline: false
            },
            {
                name: `**Personnes autoris√©es**`,
                value: interaction.options.getString(`autoris√©s`),
                inline: false
            },
            {
                name: `**Confidentialit√©**`,
                value: confi,
                inline: true
            },
            {
                name: `**Donneur¬∑se**`,
                value: interaction.options.getString(`donneur`),
                inline: true
            },
            {
                name: `**Traitement**`,
                value: interaction.options.getString(`traitement`),
                inline: false
            },
        );
        if(interaction.options.getString(`autre`) != null) {
            newEmbed.addFields(
                {
                    name: `**Infos compl√©mentaires**`,
                    value: interaction.options.getString(`autre`),
                    inline: false
                }
            );
        }
        const agendaID = await agendaChan.send({ embeds: [newEmbed], components: [buttons] });
        newEmbed.spliceFields(3, 6);
        newEmbed.addFields(
            {
                name: `**Confidentialit√©**`,
                value: confi,
                inline: false
            }
        );
        const mayorID = await mairieD√©c√®sChan.send({ embeds: [newEmbed] });
        const LSPDID = await lspdChan.send({ embeds: [newEmbed] });

        //Sauvegarde en DB
        date = date.split('/');
        date = date[1] + '/' + date[0] + '/' + date[2];
        const sqlDate = new Date(`${date} UTC+0:00`).toISOString().slice(0, 19).replace('T', ' ');
        if(interaction.options.getString(`autre`) != null) {
            sql.insert(firstname + ' ' + lastname, sqlDate, interaction.options.getString(`service`), interaction.options.getString(`responsables`), interaction.options.getString(`autoris√©s`), confiDB, donDB, interaction.options.getString(`traitement`), interaction.member.nickname, agendaID.id, mayorID.id, LSPDID.id);
        } else {
            sql.insertWithDetails(firstname + ' ' + lastname, sqlDate, interaction.options.getString(`service`), interaction.options.getString(`responsables`), interaction.options.getString(`autoris√©s`), confiDB, donDB, interaction.options.getString(`traitement`), interaction.options.getString(`autre`), interaction.member.nickname, agendaID.id, mayorID.id, LSPDID.id);
        }

        await interaction.followUp({ embeds: [emb.generate(null, null, `Agenda mis √† jour !`, `#0DE600`, process.env.LSMS_LOGO_V2, null, `Gestion d√©c√®s`, serverIconURL, null, null, null, false)], ephemeral: true });
        await wait(5000);
        await interaction.deleteReply();
    },
};
