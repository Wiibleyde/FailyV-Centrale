//R√©cup des activit√©s Discord
const { ActivityType } = require('discord.js');
//R√©cup du logger
const logger = require('./../modules/logger');

//D√©ployement des commandes
require('./../modules/deployCommands');
//D√©ployement des commandes
const service = require('./../modules/service');
//D√©marrage de la cooldown de service
const serviceCooldown = require('./../modules/serviceCooldown');


module.exports = {
    name: 'ready',
    once: true,
    async execute(client) {
        await logger.log(`Bot en ligne! Connect√© avec le compte ${client.user.tag}`);
        //R√©cup√©ration des personnes en service
        const guild = client.guilds.cache.get(process.env.IRIS_PRIVATE_GUILD_ID);
        await guild.members.fetch();
        const countPDS = guild.roles.cache.get(process.env.IRIS_SERVICE_ROLE_ID).members;
        var serviceCount = countPDS.size;
        const countDispatch = guild.roles.cache.get(process.env.IRIS_DISPATCH_ROLE_ID).members;
        var dispatchCount = countDispatch.size;
        //Affichage de l'activit√©e du bot
        if(process.env.MODE == 'DEV') { client.user.setPresence({ activities: [{ name: `ü§ñ Dev mode!`, type: ActivityType.Competing }], status: 'idle' }); }
        else if(process.env.MODE == 'MAINTENANCE'){ client.user.setPresence({ activities: [{ name: `Maintenance en cours...`, type: ActivityType.Watching }], status: 'dnd' }); }
        else { client.user.setPresence({ activities: [{ name: `üöë ` + serviceCount + ` | üéôÔ∏è ` + dispatchCount, type: ActivityType.Watching }], status: 'online' }); }
        service.start(client);
        serviceCooldown.init();
    },

};